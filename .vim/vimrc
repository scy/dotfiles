"                 _             _
"  ___  ___ _   _( )___  __   _(_)_ __ ___  _ __ ___
" / __|/ __| | | |// __| \ \ / / | '_ ` _ \| '__/ __|
" \__ \ (__| |_| | \__ \  \ V /| | | | | | | | | (__
" |___/\___|\__, | |___/ (_)_/ |_|_| |_| |_|_|  \___|
"           |___/
" Part of my dotfiles: <https://github.com/scy/dotfiles>


" Basic settings: Ignore vi compatibility, use filetype plugins, syntax
" highlighting and UTF-8.
set nocompatible
filetype plugin on
syntax on
set encoding=utf-8

" Disable modelines for security reasons, see CVE-2019-12735 et al.
" They are off by default on Debian, but "set nocompatible" above will have
" turned them on nevertheless.
set nomodeline



" Leader character for mappings.
let mapleader="\\"
let maplocalleader="\\"



"     Plugins    /
" ______________/

" I'm using minpac for plugin management. Nevertheless, I try to keep the
" number of plugins I'm using to a minimum.

function! PackInit() abort
	packadd minpac
	call minpac#init()

	call minpac#add('k-takata/minpac', {'type': 'opt'})

	call minpac#add('vimwiki/vimwiki')
	call minpac#add('prabirshrestha/vim-lsp')
endfunction

" Defining these commands as suggested in the minpac readme, with some tweaks.
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus source $MYVIMRC | call PackInit() | call minpac#status()



"     Session / Swap Files / History    /
" _____________________________________/

" In the viminfo state file, store file marks and unlimited register contents.
" Search, command line and input history size are defined via 'history'.
" Also, put the viminfo file in ~/.vim, not directly in the home directory.
" In Neovim, 'viminfo' is an alias to 'shada', but viminfo and ShaDa files are
" incompatible. So on a system running both Vim and Neovim, 'viminfo'/'shada'
" should point to different files.
set viminfo='100,h,f1
if has('nvim')
	set shada+=n~/.vim/shada
else
	set viminfo+=n~/.vim/viminfo
endif
set history=100

" Don't litter .swp files all over the place, put them in ~/.vim/swp instead,
" but fall back to "same directory" if that's not possible for some reason.
set directory=~/.vim/swp,.



"    Visuals    /
" _____________/

" Dark background, duh.
set background=dark

" NeoVim does strange things with `ctermbg=242` instead of simply reversing
" video, and it breaks visual highlighting at least on my Linux framebuffer
" tmux. Therefore I'm explicitly configuring something that works reliably.
highlight Visual term=reverse cterm=reverse guibg=DarkGrey

" Show significant whitespace.
if &encoding == 'utf-8'
	set listchars=tab:›·,nbsp:¯,trail:·
else
	set listchars=tab:\|.,nbsp:_,trail:_
endif
set list

" Show line numbers, but no relative ones. That's because I'm using Windows
" console quite a lot, which has slow rendering (compared to e.g. Windows
" Terminal or even Termux), and 'relativenumber' has to redraw the whole
" number column on each line change.
set number norelativenumber
" Make them unobtrusive.
highlight LineNr ctermfg=DarkGray

" Soft-wrap long lines, but not in the middle of words.
set wrap linebreak

" Default tab width.
set tabstop=4 shiftwidth=4

" When splitting vertically, split to the right (not to the left). Similarly,
" when splitting horizontally, split below (not to the top).
set splitright splitbelow

" Changing cursors on mode change. (tmux also uses TERM=screen.)
if &term =~ "xterm" || &term =~ "screen"
	let &t_SI = "\<Esc>[5 q" " start insert: blinking bar
	let &t_SR = "\<Esc>[3 q" " start replace: blinking underscore
	let &t_EI = "\<Esc>[1 q" " end insert/replace: blinking block
endif



"    netrw    /
" ___________/

" Disable the banner.
let g:netrw_banner = 0
" When selecting a file, open it in the previous window (or create a new one).
let g:netrw_browse_split = 4
" Show files as a tree by default.
let g:netrw_liststyle = 3
" Default size of the split explorer is 20%.
let g:netrw_winsize = 20



"    Vimwiki    /
" _____________/

" Disable creation of ”temporary wikis“ for every .md file I edit.
let g:vimwiki_global_ext = 0
" When creating a link in a Markdown file, add the `.md` extension.
let g:vimwiki_markdown_link_ext = 1
" List of my personal wikis.
let g:vimwiki_list = [{
	\ 'path': '~/my/w',
	\ 'syntax': 'markdown',
	\ 'ext': '.md',
\ }, {
	\ 'path': '~/my/todo',
	\ 'syntax': 'markdown',
	\ 'ext': '.md',
\ }]
let g:vimwiki_conceallevel = 0



"    Filetypes and Associations    /
" ________________________________/

" For now, interpret Vue.js files simply as HTML.
au BufRead,BufNewFile *.vue set filetype=html



"    Language Server Configuration    /
" ___________________________________/

" Sane defaults from the vim-lsp readme.
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
endfunction

let g:lsp_signs_enabled = 1
let g:lsp_signs_error = {'text': 'X'}
let g:lsp_signs_warning = {'text': '!'}
let g:lsp_signs_hint = {'text': 'i'}
let g:lsp_highlight_references_enabled = 1
highlight lspReference ctermfg=cyan guifg=cyan

augroup lsp_install
	au!
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup end

" Python: pip3 install 'python-language-server[all]'
if executable('pyls')
	au User lsp_setup call lsp#register_server({
		\ 'name': 'pyls', 'cmd': {server_info->['pyls']}, 'allowlist': ['python'],
	\ })
endif



"    Mappings and Controls    /
" ___________________________/

" Enable the mouse.
set mouse=a

" Toggle file tree.
map <Leader>l :Lexplore<CR>
" Show/hide line numbers.
function! ToggleLineNumbers()
	if &number
		set nonumber norelativenumber
	else
		set number relativenumber
	endif
endfunction
noremap <Leader>n :call ToggleLineNumbers()<CR>
" Toggle between relative and absolute line numbers.
noremap <Leader>N :set relativenumber!<CR>
" Open a terminal window shell that closes automatically when exiting.
map <Leader>! :terminal ++close<CR>
